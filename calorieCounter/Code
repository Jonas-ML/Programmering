
# !/usr/local/bin/python
import time
class Meat:
    def __init__(self, weight): # init på klasse niveau med vægt
        self.weight = weight
    
    def calculate_calories(self, calories_per_100g): # bruger kcal pr 100g som paramter til udregning af hver protein
        calories = (self.weight / 100) * calories_per_100g # tager vægt og dividere med 100 og ganger med kcal pr 100g
        return calories
    
    def calculate_fat(self, fat_per_100g): # bruger fedt pr 100g som parameter
        fat = (self.weight / 100 * fat_per_100g)
        return fat
    
    def calculate_protein(self, protein_per_100g):
        protein = (self.weight / 100 * protein_per_100g)
        return protein

class Chicken(Meat):
    def __init__(self, weight, calories_per_100g, fat_per_100g, protein_per_100g): # denne init i hver subclass gøt plads til nemmere udvidelse af systemet, dog er den ikke nødvendig
        super().__init__(weight) # super nedarver parametre fra vores main INIT
        self.calories_per_100g = calories_per_100g
        self.fat_per_100g = fat_per_100g
        self.protein_per_100g = protein_per_100g
    def __str__(self):
        return f"Chicken (Weight: {self.weight}g, Calories: {self.calories_per_100g}, Fat: {self.fat_per_100g}, Protein {self.protein_per_100g} )"


class WholeChicken(Chicken): #oprettelse af opbjekter som subclasses af deres respektive protein - tager calorier, fedt og protein pr 100gram som parametre
    def __init__(self, weight):
        super().__init__(weight, 165, 3.6, 31)

class ChickenBreast(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 165, 3.6, 31)

class ChickenThigh(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 209, 11, 26)

class ChickenDrumstick(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 172, 9, 24)

class ChickenWing(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 203, 13, 23)

class ChickenTenderloin(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 189, 8, 29)

class GroundChicken(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 143, 8, 16)

class ChickenSausage(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 153, 8, 17)

class ChickenLeg(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 172, 11, 20)

class ChickenSoup(Chicken):
    def __init__(self, weight):
        super().__init__(weight, 60, 3.6, 6)


class Beef(Meat):
    def __init__(self, weight, calories_per_100g, fat_per_100g, protein_per_100g):
        super().__init__(weight)
        self.calories_per_100g = calories_per_100g
        self.fat_per_100g = fat_per_100g
        self.protein_per_100g = protein_per_100g
    def __str__(self):
        return f"CBeef (Weight: {self.weight}g, Calories: {self.calories_per_100g}, Fat: {self.fat_per_100g}, Protein {self.protein_per_100g} )"


class Sirloin(Beef):
    def __init__(self, weight):
        super().__init__(weight, 250, 19, 26)

class Ribeye(Beef):
    def __init__(self, weight):
        super().__init__(weight, 320, 27, 20)

class Tenderloin(Beef):
    def __init__(self, weight):
        super().__init__(weight, 198, 14, 24)

class GroundBeef(Beef):
    def __init__(self, weight):
        super().__init__(weight, 250, 20, 19)

class ChuckSteak(Beef):
    def __init__(self, weight):
        super().__init__(weight, 250, 22, 23)

class Brisket(Beef):
    def __init__(self, weight):
        super().__init__(weight, 300, 24, 19)

class FlankSteak(Beef):
    def __init__(self, weight):
        super().__init__(weight, 200, 14, 23)

class ShortRibs(Beef):
    def __init__(self, weight):
        super().__init__(weight, 300, 33, 18)

class NewYorkStrip(Beef):
    def __init__(self, weight):
        super().__init__(weight, 240, 16, 23)

class FiletMignon(Beef):
    def __init__(self, weight):
        super().__init__(weight, 300, 20, 23)

class Fish(Meat):
    def __init__(self, weight, calories_per_100g, fat_per_100g, protein_per_100g):
        super().__init__(weight)
        self.calories_per_100g = calories_per_100g
        self.fat_per_100g = fat_per_100g
        self.protein_per_100g = protein_per_100g
    def __str__(self):
        return f"Fish (Weight: {self.weight}g, Calories: {self.calories_per_100g}, Fat: {self.fat_per_100g}, Protein {self.protein_per_100g} )"


class Salmon(Fish):
    def __init__(self, weight):
        super().__init__(weight, 206, 12, 22)
     
class Tuna(Fish):
    def __init__(self, weight):
        super().__init__(weight, 184, 6, 30)

class Cod(Fish):
    def __init__(self, weight):
        super().__init__(weight, 82, 0.7, 18)

class Trout(Fish):
    def __init__(self, weight):
        super().__init__(weight, 119, 4.7, 19)

class Sardine(Fish):
    def __init__(self, weight):
        super().__init__(weight, 208, 11, 24)

class Halibut(Fish):
    def __init__(self, weight):
        super().__init__(weight, 140, 2.9, 26)

class Mackerel(Fish):
    def __init__(self, weight):
        super().__init__(weight, 305, 20, 31)

class Snapper(Fish):
    def __init__(self, weight):
        super().__init__(weight, 113, 2, 20)

class Swordfish(Fish):
    def __init__(self, weight):
        super().__init__(weight, 165, 8, 20)

class Haddock(Fish):
    def __init__(self, weight):
        super().__init__(weight, 88, 0.9, 20)

meat_types = {
    1: Chicken,
    2: Beef,
    3: Fish,
}

chicken_types = {
    1: WholeChicken,
    2: ChickenBreast,
    3: ChickenThigh,
    4: ChickenDrumstick,
    5: ChickenWing,
    6: ChickenTenderloin,
    7: GroundChicken,
    8: ChickenSausage,
    9: ChickenLeg,
    10: ChickenSoup,
}

beef_types = {
    1: Sirloin,
    2: Ribeye,
    3: Tenderloin,
    4: GroundBeef,
    5: ChuckSteak,
    6: Brisket,
    7: FlankSteak,
    8: ShortRibs,
    9: NewYorkStrip,
    10: FiletMignon,
}

fish_types = {
    1: Salmon,
    2: Tuna,
    3: Cod,
    4: Trout,
    5: Sardine,
    6: Halibut,
    7: Mackerel,
    8: Snapper,
    9: Swordfish,
    10: Haddock,
}


meal = [] # tom liste til total-meal
total_calories = 0 # specificere disse variabler som skal bruges til at gemme macros for brugerens mad
total_fat = 0
total_protein = 0

while True:
    for index, meat_type in meat_types.items(): # for loop til at gå igennem meat_types dictionary. .items() metoden bruges til at fetche elementerne inklusiv deres key 1,2,3
        print(f"\n{index}: {meat_type.__name__}")
    index = int(input("\nWhat type of protein are you enjoying? (Press 0 for total meal macros)"))
    if index == 0:
        break
    if index == 1:
        for index, chicken_type in chicken_types.items():
            print(f"{index}: {chicken_type.__name__}")
        type = int(input("\nWhat cut/preparation of chicken?")) # spørger efter hvilket cut i den pågældene kategori
        if type in chicken_types:
            cut_name = chicken_types[type].__name__  # Get the name of the selected chicken cut
            print("\n", chicken_types[type].__name__)  # chicken_type.__name__ referere til sidste værdi den har været assigned og det er en fejl
            weight = float(input("\nEnter the weight of the cut in grams: "))
            chicken = chicken_types[type](weight) # istedet ved brug af chicken_types[type].__name__ bruger man user input i [] for at specificere hvilket index
            calories = chicken.calculate_calories(chicken.calories_per_100g) # laver normale udregninger fra vores metoder
            fat = chicken.calculate_fat(chicken.fat_per_100g)
            protein = chicken.calculate_protein(chicken.protein_per_100g)
            cut_info = { # her pakker vi vores udregninger og data indeni en ny dictionary som vi appender til vores meal liste og herefter printer
                "Cut": cut_name,
                "Weight": weight,
                "Calories": calories,
                "Fat": fat,
                "Protein": protein
            }

            meal.append(cut_info)
            print(f"Calories: {calories} kcal")
            print(f"Fat: {fat} g")
            print(f"Protein: {protein} g")


    elif index == 2:
        for index, beef_type in beef_types.items():
            print(f"{index}: {beef_type.__name__}")
        type = int(input("\nWhat cut/preparation of beef?"))
        if type in beef_types:
            cut_name = beef_types[type].__name__
            print("\n", beef_types[type].__name__)
            weight = float(input("\nEnter the weight of the cut in grams: "))
            beef = beef_types[type](weight) # istedet ved brug af chicken_types[type].__name__ bruger man user input i [] for at specificere hvilket index
            calories = beef.calculate_calories(beef.calories_per_100g)
            fat = beef.calculate_fat(beef.fat_per_100g)
            protein = beef.calculate_protein(beef.protein_per_100g)
            cut_info = {
                "Cut": cut_name,
                "Weight": weight,
                "Calories": calories,
                "Fat": fat,
                "Protein": protein
            }

            meal.append(cut_info)
            print(f"Calories: {calories} kcal")
            print(f"Fat: {fat} g")
            print(f"Protein: {protein} g")

    elif index == 3:
        for index, fish_type in fish_types.items():
            print(f"{index}: {fish_type.__name__}")
        type = int(input("\nWhat cut/preparation of fish?"))
        if type in fish_types:
            cut_name = fish_types[type].__name__
            print("\n", fish_types[type].__name__)
            weight = float(input("\nEnter the weight of the cut in grams: "))
            fish = fish_types[type](weight) # istedet ved brug af chicken_types[type].__name__ bruger man user input i [] for at specificere hvilket index
            calories = fish.calculate_calories(fish.calories_per_100g)
            fat = fish.calculate_fat(fish.fat_per_100g)
            protein = fish.calculate_protein(fish.protein_per_100g)
            cut_info = {
                "Cut": cut_name,
                "Weight": weight,
                "Calories": calories,
                "Fat": fat,
                "Protein": protein
            }

            meal.append(cut_info)
            print(f"Calories: {calories} kcal")
            print(f"Fat: {fat} g")
            print(f"Protein: {protein} g")
running = True            
while running:
    print("Total Meal:")
    for item in meal: # for element i total_meal
        for key, value in item.items(): # tjekker hver dict i meal listen og deres key-value pairs via .items() - key er string/macro - så hvis fat key, adder den value til total_fat
            if key == "Calories":
                total_calories += value
            elif key == "Fat":
                total_fat += value
            elif key == "Protein":
                total_protein += value
            print(f"\n{key}: {value}")
        print() # denne print er en adskiller
    print("Total:")
    print(f"Calories: {total_calories} kcal")
    print(f"Fat: {total_fat} g")
    print(f"Protein: {total_protein} g")
    time.sleep(120)
    running = False
